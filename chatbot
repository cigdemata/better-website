import os
import openai
import gradio as gr

# Set your OpenAI API key
openai.api_key = "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"

plans = {
    "basic": {"data": "1GB", "minutes": "100", "price": "$10"},
    "standard": {"data": "5GB", "minutes": "300", "price": "$20"},
    "premium": {"data": "Unlimited", "minutes": "Unlimited", "price": "$50"}
}

greetings = ["Hello! Welcome to our telecom chatbot.", "Hi there! How can I assist you today?"]

requirement_messages = [
    "To help you find the best plan, could you please tell me:",
    "Sure, I'd be happy to help. Can you provide me with some information?"
]

faqs = {
    "Q1": "What are your available plans?",
    "Q2": "How much data do I get with the basic plan?",
    "Q3": "What is the price of the premium plan?",
    "Q4": "Do you offer international minutes?"
    # Add more FAQs here
}

invalid_input_messages = [
    "I'm sorry, I didn't quite understand that. Could you please rephrase?",
    "Apologies, I'm having trouble understanding. Can you try again?"
]

def greet():
    return random.choice(greetings)

def get_requirements():
    return random.choice(requirement_messages)

def find_best_plan(data, minutes):
    if data <= 1 and minutes <= 100:
        return "basic"
    elif data <= 5 and minutes <= 300:
        return "standard"
    else:
        return "premium"

def respond_to_faq(question):
    if question in faqs:
        return faqs[question]
    else:
        return "I'm sorry, I don't have information about that."

def chat(data, minutes, faq):
    response = []

    response.append(greet())
    response.append(get_requirements())

    best_plan = find_best_plan(data, minutes)
    recommended_plan = plans[best_plan]

    response.append("Based on your requirements, we recommend our '{0}' plan:".format(best_plan))
    response.append("- Data: {0}".format(recommended_plan['data']))
    response.append("- Minutes: {0}".format(recommended_plan['minutes']))
    response.append("- Price: {0}".format(recommended_plan['price']))

    if faq.lower() != "no":
        response.append("FAQ: {0}".format(respond_to_faq(faq)))

    return "\n".join(response)

iface = gr.Interface(fn=chat, inputs=[gr.inputs.Number(label="Data Usage (GB)"),
                                      gr.inputs.Number(label="Minutes"),
                                      gr.inputs.Textbox(label="FAQ (Type Q1, Q2, etc. or type 'no')")],
                     outputs=gr.outputs.Textbox())

iface = gr.Interface(
    fn=chatbot,
    inputs="text",
    outputs="text",
    live=True
)

iface.launch()
